Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statements statement
Rule 3     statements -> statement
Rule 4     statement -> assignment
Rule 5     statement -> operation
Rule 6     statement -> print
Rule 7     assignment -> VARIABLE = NUMBER
Rule 8     operation -> VARIABLE = expression
Rule 9     expression -> expression + term
Rule 10    expression -> expression - term
Rule 11    expression -> term
Rule 12    term -> term * VARIABLE
Rule 13    term -> term / VARIABLE
Rule 14    term -> term * NUMBER
Rule 15    term -> term / NUMBER
Rule 16    term -> NUMBER
Rule 17    term -> VARIABLE
Rule 18    print -> PRINT ( variable_s )
Rule 19    variable_s -> variable_s , VARIABLE
Rule 20    variable_s -> VARIABLE

Terminals, with rules where they appear

(                    : 18
)                    : 18
*                    : 12 14
+                    : 9
,                    : 19
-                    : 10
/                    : 13 15
=                    : 7 8
NUMBER               : 7 14 15 16
PRINT                : 18
VARIABLE             : 7 8 12 13 17 19 20
error                : 

Nonterminals, with rules where they appear

assignment           : 4
expression           : 8 9 10
operation            : 5
print                : 6
program              : 0
statement            : 2 3
statements           : 1 2
term                 : 9 10 11 12 13 14 15
variable_s           : 18 19

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) assignment -> . VARIABLE = NUMBER
    (8) operation -> . VARIABLE = expression
    (18) print -> . PRINT ( variable_s )

    VARIABLE        shift and go to state 4
    PRINT           shift and go to state 3

    statements                     shift and go to state 1
    assignment                     shift and go to state 2
    program                        shift and go to state 5
    statement                      shift and go to state 6
    print                          shift and go to state 7
    operation                      shift and go to state 8

state 1

    (1) program -> statements .
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) assignment -> . VARIABLE = NUMBER
    (8) operation -> . VARIABLE = expression
    (18) print -> . PRINT ( variable_s )

    $end            reduce using rule 1 (program -> statements .)
    VARIABLE        shift and go to state 4
    PRINT           shift and go to state 3

    assignment                     shift and go to state 2
    statement                      shift and go to state 9
    print                          shift and go to state 7
    operation                      shift and go to state 8

state 2

    (4) statement -> assignment .

    VARIABLE        reduce using rule 4 (statement -> assignment .)
    PRINT           reduce using rule 4 (statement -> assignment .)
    $end            reduce using rule 4 (statement -> assignment .)


state 3

    (18) print -> PRINT . ( variable_s )

    (               shift and go to state 10


state 4

    (7) assignment -> VARIABLE . = NUMBER
    (8) operation -> VARIABLE . = expression

    =               shift and go to state 11


state 5

    (0) S' -> program .



state 6

    (3) statements -> statement .

    VARIABLE        reduce using rule 3 (statements -> statement .)
    PRINT           reduce using rule 3 (statements -> statement .)
    $end            reduce using rule 3 (statements -> statement .)


state 7

    (6) statement -> print .

    VARIABLE        reduce using rule 6 (statement -> print .)
    PRINT           reduce using rule 6 (statement -> print .)
    $end            reduce using rule 6 (statement -> print .)


state 8

    (5) statement -> operation .

    VARIABLE        reduce using rule 5 (statement -> operation .)
    PRINT           reduce using rule 5 (statement -> operation .)
    $end            reduce using rule 5 (statement -> operation .)


state 9

    (2) statements -> statements statement .

    VARIABLE        reduce using rule 2 (statements -> statements statement .)
    PRINT           reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)


state 10

    (18) print -> PRINT ( . variable_s )
    (19) variable_s -> . variable_s , VARIABLE
    (20) variable_s -> . VARIABLE

    VARIABLE        shift and go to state 12

    variable_s                     shift and go to state 13

state 11

    (7) assignment -> VARIABLE = . NUMBER
    (8) operation -> VARIABLE = . expression
    (9) expression -> . expression + term
    (10) expression -> . expression - term
    (11) expression -> . term
    (12) term -> . term * VARIABLE
    (13) term -> . term / VARIABLE
    (14) term -> . term * NUMBER
    (15) term -> . term / NUMBER
    (16) term -> . NUMBER
    (17) term -> . VARIABLE

    NUMBER          shift and go to state 15
    VARIABLE        shift and go to state 16

    term                           shift and go to state 14
    expression                     shift and go to state 17

state 12

    (20) variable_s -> VARIABLE .

    )               reduce using rule 20 (variable_s -> VARIABLE .)
    ,               reduce using rule 20 (variable_s -> VARIABLE .)


state 13

    (18) print -> PRINT ( variable_s . )
    (19) variable_s -> variable_s . , VARIABLE

    )               shift and go to state 18
    ,               shift and go to state 19


state 14

    (11) expression -> term .
    (12) term -> term . * VARIABLE
    (13) term -> term . / VARIABLE
    (14) term -> term . * NUMBER
    (15) term -> term . / NUMBER

    +               reduce using rule 11 (expression -> term .)
    -               reduce using rule 11 (expression -> term .)
    VARIABLE        reduce using rule 11 (expression -> term .)
    PRINT           reduce using rule 11 (expression -> term .)
    $end            reduce using rule 11 (expression -> term .)
    *               shift and go to state 20
    /               shift and go to state 21


state 15

    (7) assignment -> VARIABLE = NUMBER .
    (16) term -> NUMBER .

  ! reduce/reduce conflict for VARIABLE resolved using rule 7 (assignment -> VARIABLE = NUMBER .)
  ! reduce/reduce conflict for PRINT resolved using rule 7 (assignment -> VARIABLE = NUMBER .)
  ! reduce/reduce conflict for $end resolved using rule 7 (assignment -> VARIABLE = NUMBER .)
    VARIABLE        reduce using rule 7 (assignment -> VARIABLE = NUMBER .)
    PRINT           reduce using rule 7 (assignment -> VARIABLE = NUMBER .)
    $end            reduce using rule 7 (assignment -> VARIABLE = NUMBER .)
    *               reduce using rule 16 (term -> NUMBER .)
    /               reduce using rule 16 (term -> NUMBER .)
    +               reduce using rule 16 (term -> NUMBER .)
    -               reduce using rule 16 (term -> NUMBER .)

  ! VARIABLE        [ reduce using rule 16 (term -> NUMBER .) ]
  ! PRINT           [ reduce using rule 16 (term -> NUMBER .) ]
  ! $end            [ reduce using rule 16 (term -> NUMBER .) ]


state 16

    (17) term -> VARIABLE .

    *               reduce using rule 17 (term -> VARIABLE .)
    /               reduce using rule 17 (term -> VARIABLE .)
    +               reduce using rule 17 (term -> VARIABLE .)
    -               reduce using rule 17 (term -> VARIABLE .)
    VARIABLE        reduce using rule 17 (term -> VARIABLE .)
    PRINT           reduce using rule 17 (term -> VARIABLE .)
    $end            reduce using rule 17 (term -> VARIABLE .)


state 17

    (8) operation -> VARIABLE = expression .
    (9) expression -> expression . + term
    (10) expression -> expression . - term

    VARIABLE        reduce using rule 8 (operation -> VARIABLE = expression .)
    PRINT           reduce using rule 8 (operation -> VARIABLE = expression .)
    $end            reduce using rule 8 (operation -> VARIABLE = expression .)
    +               shift and go to state 22
    -               shift and go to state 23


state 18

    (18) print -> PRINT ( variable_s ) .

    VARIABLE        reduce using rule 18 (print -> PRINT ( variable_s ) .)
    PRINT           reduce using rule 18 (print -> PRINT ( variable_s ) .)
    $end            reduce using rule 18 (print -> PRINT ( variable_s ) .)


state 19

    (19) variable_s -> variable_s , . VARIABLE

    VARIABLE        shift and go to state 24


state 20

    (12) term -> term * . VARIABLE
    (14) term -> term * . NUMBER

    VARIABLE        shift and go to state 25
    NUMBER          shift and go to state 26


state 21

    (13) term -> term / . VARIABLE
    (15) term -> term / . NUMBER

    VARIABLE        shift and go to state 27
    NUMBER          shift and go to state 28


state 22

    (9) expression -> expression + . term
    (12) term -> . term * VARIABLE
    (13) term -> . term / VARIABLE
    (14) term -> . term * NUMBER
    (15) term -> . term / NUMBER
    (16) term -> . NUMBER
    (17) term -> . VARIABLE

    NUMBER          shift and go to state 30
    VARIABLE        shift and go to state 16

    term                           shift and go to state 29

state 23

    (10) expression -> expression - . term
    (12) term -> . term * VARIABLE
    (13) term -> . term / VARIABLE
    (14) term -> . term * NUMBER
    (15) term -> . term / NUMBER
    (16) term -> . NUMBER
    (17) term -> . VARIABLE

    NUMBER          shift and go to state 30
    VARIABLE        shift and go to state 16

    term                           shift and go to state 31

state 24

    (19) variable_s -> variable_s , VARIABLE .

    )               reduce using rule 19 (variable_s -> variable_s , VARIABLE .)
    ,               reduce using rule 19 (variable_s -> variable_s , VARIABLE .)


state 25

    (12) term -> term * VARIABLE .

    *               reduce using rule 12 (term -> term * VARIABLE .)
    /               reduce using rule 12 (term -> term * VARIABLE .)
    +               reduce using rule 12 (term -> term * VARIABLE .)
    -               reduce using rule 12 (term -> term * VARIABLE .)
    VARIABLE        reduce using rule 12 (term -> term * VARIABLE .)
    PRINT           reduce using rule 12 (term -> term * VARIABLE .)
    $end            reduce using rule 12 (term -> term * VARIABLE .)


state 26

    (14) term -> term * NUMBER .

    *               reduce using rule 14 (term -> term * NUMBER .)
    /               reduce using rule 14 (term -> term * NUMBER .)
    +               reduce using rule 14 (term -> term * NUMBER .)
    -               reduce using rule 14 (term -> term * NUMBER .)
    VARIABLE        reduce using rule 14 (term -> term * NUMBER .)
    PRINT           reduce using rule 14 (term -> term * NUMBER .)
    $end            reduce using rule 14 (term -> term * NUMBER .)


state 27

    (13) term -> term / VARIABLE .

    *               reduce using rule 13 (term -> term / VARIABLE .)
    /               reduce using rule 13 (term -> term / VARIABLE .)
    +               reduce using rule 13 (term -> term / VARIABLE .)
    -               reduce using rule 13 (term -> term / VARIABLE .)
    VARIABLE        reduce using rule 13 (term -> term / VARIABLE .)
    PRINT           reduce using rule 13 (term -> term / VARIABLE .)
    $end            reduce using rule 13 (term -> term / VARIABLE .)


state 28

    (15) term -> term / NUMBER .

    *               reduce using rule 15 (term -> term / NUMBER .)
    /               reduce using rule 15 (term -> term / NUMBER .)
    +               reduce using rule 15 (term -> term / NUMBER .)
    -               reduce using rule 15 (term -> term / NUMBER .)
    VARIABLE        reduce using rule 15 (term -> term / NUMBER .)
    PRINT           reduce using rule 15 (term -> term / NUMBER .)
    $end            reduce using rule 15 (term -> term / NUMBER .)


state 29

    (9) expression -> expression + term .
    (12) term -> term . * VARIABLE
    (13) term -> term . / VARIABLE
    (14) term -> term . * NUMBER
    (15) term -> term . / NUMBER

    +               reduce using rule 9 (expression -> expression + term .)
    -               reduce using rule 9 (expression -> expression + term .)
    VARIABLE        reduce using rule 9 (expression -> expression + term .)
    PRINT           reduce using rule 9 (expression -> expression + term .)
    $end            reduce using rule 9 (expression -> expression + term .)
    *               shift and go to state 20
    /               shift and go to state 21


state 30

    (16) term -> NUMBER .

    *               reduce using rule 16 (term -> NUMBER .)
    /               reduce using rule 16 (term -> NUMBER .)
    +               reduce using rule 16 (term -> NUMBER .)
    -               reduce using rule 16 (term -> NUMBER .)
    VARIABLE        reduce using rule 16 (term -> NUMBER .)
    PRINT           reduce using rule 16 (term -> NUMBER .)
    $end            reduce using rule 16 (term -> NUMBER .)


state 31

    (10) expression -> expression - term .
    (12) term -> term . * VARIABLE
    (13) term -> term . / VARIABLE
    (14) term -> term . * NUMBER
    (15) term -> term . / NUMBER

    +               reduce using rule 10 (expression -> expression - term .)
    -               reduce using rule 10 (expression -> expression - term .)
    VARIABLE        reduce using rule 10 (expression -> expression - term .)
    PRINT           reduce using rule 10 (expression -> expression - term .)
    $end            reduce using rule 10 (expression -> expression - term .)
    *               shift and go to state 20
    /               shift and go to state 21

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 15 resolved using rule (assignment -> VARIABLE = NUMBER)
WARNING: rejected rule (term -> NUMBER) in state 15
